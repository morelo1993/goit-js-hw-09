{"mappings":"AAAA,SAASA,EAAcC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,IAAIC,EAAgBC,KAAKC,SAAW,GAEpCC,YAAW,KACP,IAAIC,EAAc,C,SAAET,E,MAAUC,GAE1BI,EACAF,EAAQM,GAERL,EAAOK,EAAY,GAExBR,EAAM,G,CAIjBS,SAASC,eAAe,gBAAgBC,iBAAiB,UAAU,SAAUC,GAC7EA,EAAMC,iBAGN,IAAIC,EAAaL,SAASM,kBAAkB,SAAS,GACjDC,EAAYP,SAASM,kBAAkB,QAAQ,GAC/CE,EAAcR,SAASM,kBAAkB,UAAU,GAEnDG,EAAQC,SAASL,EAAWM,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAElC,GAAIG,MAAML,IAAUK,MAAMF,IAASE,MAAMD,GAErC,YADAE,SAASC,OAAOC,QAAQ,sCAI5B,IAAIC,EAAeT,EAEnB,IAAK,IAAIU,EAAI,EAAGA,GAAKN,EAAQM,IACzB9B,EAAc8B,EAAGD,GAChBE,MAAK,EAAC9B,SAAEA,EAAQC,MAAEA,MACfwB,SAASC,OAAOK,QAAQ,uBAAqB/B,QAAiBC,MAAU,IAE3E+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAChBwB,SAASC,OAAOC,QAAQ,sBAAoB3B,QAAeC,MAAU,IAGzE2B,GAAgBN,C","sources":["src/js/03-promises.js"],"sourcesContent":["function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n        let shouldResolve = Math.random() > 0.3;\n\n        setTimeout(() => {\n            let promiseData = { position, delay };\n\n            if (shouldResolve) {\n                resolve(promiseData);\n            } else {\n                reject(promiseData);\n            }\n        }, delay);\n    });\n}\n\ndocument.getElementById(\"promise-form\").addEventListener(\"submit\", function (event) {\nevent.preventDefault();\n\n\nlet delayInput = document.getElementsByName(\"delay\")[0];\nlet stepInput = document.getElementsByName(\"step\")[0];\nlet amountInput = document.getElementsByName(\"amount\")[0];\n\nlet delay = parseInt(delayInput.value);\nlet step = parseInt(stepInput.value);\nlet amount = parseInt(amountInput.value);\n\nif (isNaN(delay) || isNaN(step) || isNaN(amount)) {\n    Notiflix.Notify.failure(\"PORFAVOR INGRESA UN NUMERO VALIDO!\");\n    return;\n}\n\nlet currentDelay = delay;\n\nfor (let i = 1; i <= amount; i++) {\n    createPromise(i, currentDelay)\n    .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    currentDelay += step;\n}\n});"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","promiseData","document","getElementById","addEventListener","event","preventDefault","delayInput","getElementsByName","stepInput","amountInput","delay1","parseInt","value","step","amount","isNaN","Notiflix","Notify","failure","currentDelay","i","then","success","catch"],"version":3,"file":"03-promises.9b0a5f56.js.map"}